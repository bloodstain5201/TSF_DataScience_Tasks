# -*- coding: utf-8 -*-
"""Prediction of Student Marks based on Study Hours.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BynuLRfDgy9yT1Zd9j4QH5zINGYqBKVY

## Linear Regression

In this notebook we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied.
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import seaborn as sns
import matplotlib.pyplot as plt  
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

# importing data
url = "http://bit.ly/w-data"
s_data = pd.read_csv(url)
s_data.head(10)

"""Plotting data points on 2-D graph to find any relationship between the data"""

# Plotting the distribution of scores
s_data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""#### Hence, we see that there is a positive linear relation between the number of hours studied and percentage of score. """

#correlation plot
plt.figure(figsize=(5,5))
correlation_matrix = s_data.corr()
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True)
plt.show()

"""### **Preparing the data**

Dividing the data into "attributes" (inputs) and "labels" (outputs).
"""

X = s_data.iloc[:, :-1].values  
y = s_data.iloc[:, 1].values

"""## Spliting this data into training and test sets"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=0)

"""### **Training the Algorithm**"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""### **Making Predictions**"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

df.plot(kind='bar',figsize=(8,6), color=["B", "G"], title= "Comaparison between Actual and Predicted Score Values")

# Testing on our required data
hours = np.array([9.25])
hours = hours.reshape(-1,1)
own_pred = regressor.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""### **Evaluating the model**

"""

# Importing metrics from sklearn 
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error

# To find Mean Absolute Error(mse)
mse = (mean_absolute_error(y_test, y_pred))
print("MAE:",mse)

# To find Root Mean Squared Error(rmse)
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
print("RMSE:",rmse)

# To find coefficient of determination
r2 =  r2_score(y_test, y_pred)
print("R-Square:",r2)

"""### The accuracy of the model is 94.55%. The mean absolute error is 4.18%."""

User_input = float(input())
print('Hours: {}'.format(User_input))
print('Predicted Score{}'.format(regressor.predict([[User_input]])))

import pickle
pickle_out = open('regressor.pickle', 'wb')
pickle.dump(regressor, pickle_out)
pickle_out.close()