# -*- coding: utf-8 -*-
"""Decision Trees Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZqxxoIUt7Wt_6gruU4EasroKxMOmGY0Y

# Exploring Supervised Machine Learning with Decision Tree

In ‘Iris’ dataset we have to create the Decision Tree classifier and visualize it graphically. The purpose is if we feed any new data to this classifier, it would be able to predict the right class accordingly.
"""

from IPython.display import Image
Image(filename='Iris.jpg', height=450, width=400)

# Importing libraries in Python

import pandas as pd
from matplotlib import pyplot as plt
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier 
from sklearn import tree
import seaborn as sns

#Filtering the warnings

import warnings
warnings.filterwarnings('ignore')

"""## Loading the dataset"""

iris = datasets.load_iris()

data=pd.DataFrame(iris['data'],columns=["Petal length","Petal Width","Sepal Length","Sepal Width"])

"""Creating a new column “Species” with target values from the dataset, I am using lambda function to apply a function so as to convert the target values which are 0,1,2 to the corresponding target values(“setosa”,”versicolor”,”virginica”)"""

data['Species']=iris['target']

data['Species']=data['Species'].apply(lambda x: iris['target_names'][x])

data.head()

sns.pairplot(data, hue = 'Species')
plt.show()

"""We can easily observe that "iris-setosa" makes a distinctive cluster in every parameter, while the other two species are overlapping a bit on each other

## Let's check correlation using heatmap
"""

plt.figure(figsize=(10,11))
sns.heatmap(data.corr(),annot=True)
plt.plot()

"""Observations made -

1. Petal length is highly related to petal width.
2. Sepal lenth is not related sepal width

## Let's see that how the categorical feature “Species” is distributed with all other four input variables.
"""

plt.figure(figsize=(12,10))
plt.subplot(2,2,1)
sns.boxplot(x="Species",y="Sepal Length",data=data)
plt.subplot(2,2,2)
sns.boxplot(x="Species",y="Sepal Width",data=data)
plt.subplot(2,2,3)
sns.boxplot(x="Species",y="Petal length",data=data)
plt.subplot(2,2,4)
sns.boxplot(x="Species",y="Petal Width",data=data)

"""## Preparing the data for Model Building"""

from sklearn.model_selection import train_test_split

train,test=train_test_split(data,test_size=0.3)

train_X=train[['Sepal Length',"Sepal Width","Petal length","Petal Width"]]
train_y=train.Species

test_X=test[['Sepal Length',"Sepal Width","Petal length","Petal Width"]]
test_y=test.Species

"""## Importing Decision Tree from Sklearn to build a classification model"""

from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier(random_state=12)
model = DT.fit(train_X, train_y)

DT.predict(test_X)

"""## Let's check accuracy of the model build"""

DT.score(test_X, test_y)

#prediction
y_pred = DT.predict(test_X)

#Accuracy
from sklearn import metrics
print('Accuracy Score:', metrics.accuracy_score(test_y, y_pred))

"""## As the model is now ready, moving ahead for the visualization of the Decision Tree"""

!pip install pydotplus

# Import necessary libraries for graph viz
from sklearn.externals.six import StringIO  
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus

# Visualize the graph
dot_data = StringIO()
export_graphviz(DT, out_file=dot_data, feature_names=iris.feature_names,  
                filled=True, rounded=True,
                special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
Image(graph.create_png())

"""## Now feeding any new/test data to this classifer and it would be able to predict the right class accordingly."""

DT.predict([[3.5, 1.9, 5.2, 2.4]])

DT.predict([[4.6, 2.9, 3.6, 5.9]])

